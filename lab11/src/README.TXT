Задача 1: (Пример за интерфейс)
a) да се създаде интерфейс Машина, (IMachine) който да позволява включване на
захранването, изключване на захранването и започване на работа;
b) да се създаде клас Кола (Car), който имплементира методите на интерфейса Машина;
c) да се създаде клас Камион (Truck), който имплементира методите на интерфейса
Машина;
d) Да се създаде тестов клас MachineTest, в който да се тестват класовете с различни
входни данни


Задача 2: (разширение и модифицирана задача 1)
a) да се създаде интерфейс „Жажда скорости”, (INeed4Speed), който да
позволява следните операции: включване на захранването (powerOn), изключване на
захранването (powerOff) и ускоряване на скоростта с определена стъпка (speedUp),
намаляване на скоростта с определена стъпка (breaks()), изпреварване (overtake); и
пренапишете метод toString, който да изписва „Кола марка Ситроен ZX” (като марката
се взема от вътрешно поле brand, а за камион аналогично „Камион марка ...” и отново
марката се взема от вътрешно поле brand;
b) да се създаде клас Кола (Car), който имплементира методите на интерфейса
машина; (за самостоятелна работа може да се напише клас Ferrari, който при опит да се
запали, да изписва, че не пали); В колата да има допълнителен метод „премигни с
фаровете” (flashLights), в който се извежда съобщение „колата...премигна с фарове”
c) да се създаде клас Камион (Truck), който имплементира методите на
интерфейса Машина; В колата да има допълнителен метод „свирни с клаксон”
(makeSomeNoise), в който се извежда съобщение „камион свирна оглушително”
d) Да се създаде тестов клас MachineTest, в който да се тестват класовете с
различни входни данни 


Задача 2 (за самостоятелна работа):
Дефинирайте подобен интерфейс Computable за класа компютър, и го имплементирайте
в клас Компютър (както задачата в упражнение 2), като добавите методи startup,
shutdown и compute.
Задача 3 (За работа в час!!):
- заредете примерният код даден към упражнението и го стартирайте (или
създайте двата класа, като използвате приложение 1 и приложение 2, в края
на този документ).
- Напишете класовете Point, Line, Rectangle, Circle (със характеристики център
и радиус). Ако сте ги писали в упражнение 4 и 5 – ги добавете към проекта;
- Декларирайте интерфейс IDrawable с метод public
 public abstract void drawIt(java.awt.Graphics g);
- Имплементирайте интерфейса в трите класа.
- Да се МОДИФИЦИРА приложения код (ако има приложен такъв), с цел да
може да се изчертават обекти от тип Circle, Line и Rectangle. Ако няма
приложен код – изпишете за всеки от обектите – „изчертава се окръжност с
център (10, 10) и радиус 50“ – за клас Circle, и аналогично за класове Line и
Rectangle.


Задача за клас Point и класа Line
Нека имаме класа Point (с полета x, y и label). Да се създаде клас Line, наследник на
класа Point със два атрибута – начална точка (наследена от класа Point) и крайна точка
(startPoint и endPoint). Нека началната точка да е с координати – наследената точка
(достъп до нея става чрез референцията super), а крайната точка да се дефинира като
нова точка endPoint. (забележка: създаването на клас Line по този начин цели да
упражни концепциите за наследяване, а не за реалното му използване).
Задача за клас Rectangle
Да се направи клас, представляващ правоъгълник (Rectangle), който наследява класа
Точка (Point) и има две допълнителни характеристики – широчина и височина (width и
height). Да се напишат допълнително метод, който връща лицето на правоъгълника.


Задача за клас Circle
Да се напише клас Кръг (Circle) (с трите вида конструктори, метод toString, с
характеристики стартова точка – от тип класа Точка (Point) характеристики център
(centerPoint) и радиус (radius). Да се напишат методи за достъп. Да се напише метод,
който връща лицето на кръга.
(За самостоятелна работа)
Да се направи тестов клас GeometryTest, който да създава по няколко различни обекта
от класовете Point, Rectangle, Circle, Line и да извежда наличната информация за всяка
от тях (координати, дължина, лице).
